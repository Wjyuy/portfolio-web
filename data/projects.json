[  
  {
    "id": "project-3",
    "title": "MoodSync",
    "description": "사용자의 감정을 파악하고 그에 맞는 음악, 책, 활동을 추천하는 웹사이트입니다.",
    "goals": [
      "기존 감정 관리 앱은 현재 기분이나 상황을 반영하지 못하고 일반적인 추천만 제공하여 실제 사용자에게 도움이 되지 않습니다.",
      "또한 사용자가 자신의 감정을 명확히 인지하고 표현하기 힘든 경우가 많습니다.",
      "TensorFlow 기반 감정 분석 모델을 개발하여 복합적인 감정 상태를 다차원적으로 파악하여 음악, 책, 활동 추천 알고리즘을 구현하여  추천 한계를 극복하고 사용자의 삶의 질 향상 기여를 목표로 하였습니다."
    ],
    "period": "2025.05.27 - 2025.06.16",
    "status": "Completed",
    "features": [
      "Tensorflow 기반 머신러닝 기반 활동 추천 시스템 구축",
      "react-draggable 라이브러리를 사용한 컬렉션 관리 기능",
      "useEffect 훅을 사용한 스크롤 기반 UI제어",
      "Zustand를 활용한 전역 인증 상태 관리"
    ],
    "screenshots": [
      { "url": "/images/projects/portfolio3/main.png", "caption": "메인 페이지" },
      { "url": "/images/projects/portfolio3/main2.png", "caption": "감정기반 추천" },
      { "url": "/images/projects/portfolio3/collection2.png", "caption": "컬렉션 페이지" },
      { "url": "/images/projects/portfolio3/admin1.png", "caption": "관리자 통계" },
      { "url": "/images/projects/portfolio3/admin4.png", "caption": "모델학습" },
      { "url": "/images/projects/portfolio3/setting.png", "caption": "설정" },
      { "url": "/images/projects/portfolio3/qna.png", "caption": "문의하기" },
      { "url": "/images/projects/portfolio3/dark.png", "caption": "다크모드" },
      { "url": "/images/projects/portfolio3/MoodSync_desc.png", "caption": "포스터" }
    ],
    "video": [
      { "url": "/images/projects/portfolio3/m1.mp4", "caption": "시연영상 : 메인 기능" },
      { "url": "/images/projects/portfolio3/m2.mp4", "caption": "시연영상 : 로그인 / 단일컬렉션" },
      { "url": "/images/projects/portfolio3/m3.mp4", "caption": "시연영상 : 컬렉션 관리" }
    ],
    "contributions": {
      "score" : 30,
      "role": "팀원",
      "responsibilities": [
        "Zustand 스토어로 애플리케이션 전반에 걸쳐 필요한 인증 관련 상태를 중앙에서 관리",
        "로그인 / 회원가입 시 onSubmit이벤트로 SPA 특성을 유지하며 폼 제출 처리",
        "axios.create()를 사용하여 api라는 Axios 인스턴스를 생성하고, 공통된 API URL 및 헤더 설정",
        "useState를 사용하여 UI와 데이터의 상태를 일관성 있게 유지",
        "face-api.js가 제공하는 7가지 기본 감정 표현을 변환하는 매핑 로직 설계",
        "드래그 앤 드롭을 통한 아이템 순서 변경 및 컬렉션 간 이동 기능",
        "App Router 방식에 맞춰 next/link를 사용하여 페이지 간의 클라이언트 사이드 내비게이션을 최적화",
        "모바일 환경 최적화 및 반응형 디자인 적용"
      ]
    },
    "technologies": {
      "frontend": ["NextJS", "TypeScript", "React", "Tailwind CSS"],
      "backend": ["Java 17", "Spring Boot", "JWT token","Spring security","Tenserflow"],
      "database": ["Oracle"],
      "deployment": ["Vercel"]
    },
    "troubleshooting": [
      {
        "problem": "드래그 앤 드롭(DND) 아이템 순서 변경 시 백엔드 페이로드 불일치 문제",
        "solution": "컬렉션 아이템의 드래그 앤 드롭 순서 변경 기능을 구현하는 과정에서, 프론트엔드에서 구성하여 백엔드로 전송하는 페이로드(DTO)의 필드 이름이 백엔드(Spring Boot)에서 기대하는 이름과 일치하지 않아 API 호출 실패. DTO 구조와 필드명을 파악하고 페이로드를 재구성",
        "result": "백엔드와 프론트엔드 간의 데이터 일관성 확보"
      },
      {
        "problem": "Axios 응답 인터셉터의 직접적인 리다이렉션 문제",
        "solution": "App Router 환경에서는 브라우저 API를 통한 직접 리다이렉션이 클라이언트 사이드 내비게이션 흐름 방해 및 서버 컴포넌트 컨텍스트에서 부작용 발생해, 에러를 호출자에 전파하고 useRouter 훅을 사용하여 클라이언트 사이드에서 리다이렉션 처리",
        "result": "관심사 분리 원칙을 준수하며 안정적인 라우팅 및 에러 처리 흐름 구축"
      },
      {
        "problem": "페이지 첫 로딩 시 토큰 유무를 확인해, 로그인 상태 체크 후 헤더에 표현하는 데 비정상적 작동 발생",
        "solution": "인증 상태를 확인하는 AuthInitializer.tsx가 중복 호출되던 문제 수정, zustand를 활용한 authStore.ts를 제작하고, 헤더 로딩 시 토큰을 먼저 점검하도록 컴포넌트를 배치하여 해결",
        "result": "로그인 상태에 따라 헤더가 정상적으로 표시되고, 사용자 경험 향상"
      }
    ],
    "links": {
      "github": "https://github.com/Wjyuy/MoodSync",
      "demo": "https://mood-sync-41q7vg7mr-wjyuys-projects.vercel.app/",
      "article": "https://dnwndus.tistory.com/entry/%EC%82%AC%EC%9D%B4%EB%93%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-NextTensorFlowspringBoot-%EA%B0%90%EC%A0%95-%EA%B8%B0%EB%B0%98-%EC%B6%94%EC%B2%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8-MoodSync-%ED%9B%84%EA%B8%B0"
    }
  },
  {
    "id": "project-2",
    "title": "Recall Center",
    "description": "사용자 중심 자동차 리콜 빅데이터 분석 및 정보 제공 플랫폼입니다.",
    "goals": [
      "공공데이터 포털이나 기존 리콜 정보 제공 웹사이트는 전문적인 용어로 인해 일반 사용자들이  결함의 심각성이나 해결 방안을 명확히 이해하기 어렵습니다.",
      "빅데이터 및 AI 기반 분석을 통해 사용자가 잠재적 문제를 사전에 인지하고, 대화형 AI를 활용한 직관적이고 개인화된 정보 접근 경험 제공을 목표로 하는 프로젝트입니다.",
      "벤치마킹 : https://www.car.go.kr/home/main.do"
    ],
    "period": "2025.05.19 - 2025.05.25",
    "status": "Completed",
    "features": [
      "공공데이터를 활용한 리콜 정보 제공",
      "Flask를 활용한 머신러닝 기반 유사 리콜 조회",
      "Gemini를 활용한 챗봇 기능과 DB 연동을 통해 맥락에 맞는 답변 제공",
      "React, Spring Boot 를 이용한 SPA 기반 사용자 인터페이스",
      "API데이터 통기화를 위한 관리자 페이지 제공"
    ],
    "screenshots": [
      { "url": "/images/projects/portfolio2/main.png", "caption": "메인 페이지" },
      { "url": "/images/projects/portfolio2/report.png", "caption": "결함신고" },
      { "url": "/images/projects/portfolio2/list.png", "caption": "신고조회" },
      { "url": "/images/projects/portfolio2/reportcheck.png", "caption": "관리자 검수" },
      { "url": "/images/projects/portfolio2/static1.png", "caption": "통계 표" },
      { "url": "/images/projects/portfolio2/static2.png", "caption": "통계 그래프" },
      { "url": "/images/projects/portfolio2/recallposter.png", "caption": "포스터" }
    ],
    "contributions": {
      "score" : 50,
      "role": "팀장",
      "responsibilities": [
        "하루 단위의 스프린트 계획 및 회고 주도",
        "칸반보드를 이용한 전체 일정 관리 및 진행 상황 모니터링",
        "기존 JSP 기반 프론트엔드를 React SPA로 마이그레이션 전담",
        "React Router로 URL 기반 화면 전환 및 상태 관리 구현",
        "REST API 설계 및 구현으로 백엔드와 프론트엔드 통신 최적화",
        "표를 기반으로 한 그래프를 recharts로 구현, wkhtmltox를 활용한 pdf 생성",
        "Gemini API 연동을 통한 챗봇 기능 구현",
        "모바일 환경 최적화 및 반응형 디자인 적용"
      ]
    },
    "technologies": {
      "frontend": ["JavaScript", "React 19", "React Router"],
      "backend": ["Java 17", "Spring Boot", "Tomcat", "NodeJS", "Flask", "Python"],
      "database": ["MySQL"],
      "deployment": ["Render"]
    },
    "troubleshooting": [
      {
        "problem": "API 데이터를 직접 가져오다 DB전환 시도에서 데이터 매핑 오류로 인해 리콜 정보 조회 실패",
        "solution": "콘솔 로그에서 예외 스택 트레이스를 확인하여 오류 발생 지점 파악, 데이터베이스 스키마와 API 응답 구조를 비교하여 매핑 로직 수정",
        "result": "API와 데이터베이스 간의 데이터 일관성 확보"
      },
      {
        "problem": "그래프 라이브러리에 백엔드 데이터 형태가 그래프 라이브러리가 요구하는 JSON/JavaScript 객체 형태와 맞지 않아 데이터 시각화 오류 발생",
        "solution": "백엔드에서 전달되는 데이터가 JavaScript에서 그래프 라이브러리가 예상하는 JSON 형식과 일치하지 않던 문제 수정해 해결",
        "result": "백엔드와 프론트엔드 간의 데이터 형식 일치로 통계 그래프 정상 표시"
      },
      {
        "problem": "API 데이터 처리 및 페이징 로직 한계(유사 리콜 조회 불가)",
        "solution": "API 데이터를 DB에 저장하고, 관리자 기능에 동기화를 추가하여 데이터베이스와의 일관성 유지",
        "result": "데이터 관리 용이성 확보, API 호출 횟수 감소로 성능 향상"
      }
    ],
    "links": {
      "github": "https://github.com/Wjyuy/Recall_Final",
      "demo": "https://recall-final-front.onrender.com/"
    }
  },
  {
    "id": "project-1",
    "title": "ShoFriend",
    "description": "메신저,쇼핑몰을 합친 상품 판매 웹사이트입니다.",
    "goals": [
      "친구와 함께 쇼핑할때 메신저와 쇼핑 앱을 계속해서 오가야 하는데, 두 가지가 분리된 환경에서는 흐름이 끊기고 불편하다고 생각했습니다.",
      "두 애플리케이션을 합쳐 실시간 채팅, 친구 추천 시스템 등의 도입으로 사용자 체류 시간을 증가시켜 구매 전환율을 극대화 시키는것을 목표로 하는 프로젝트입니다."
    ],
    "period": "2025.05.07 - 2025.05.14",
    "status": "Completed",
    "features": [
      "AJAX 기반 비동기 방식으로 매끄럽고 빠른 사용자 경험 제공",
      "WebSocket을 이용한 실시간 채팅 지원",
      "친구 추천 시스템을 통한 사용자 맞춤형 상품 추천 알고리즘 구현",
      "구매자,판매자에 따른 페이지 레이아웃 차별화",
      "UUID를 적용한 상품 CRUD 구축",
      "카카오페이 API 를 이용한 결제 시스템 연동"
    ],
    "screenshots": [
      { "url": "/images/projects/portfolio1/portfoliomain.png", "caption": "메인 페이지" },
      { "url": "/images/projects/portfolio1/portfoliodatail.png", "caption": "상세 페이지" },
      { "url": "/images/projects/portfolio1/portfoliochat.png", "caption": "채팅" },
      { "url": "/images/projects/portfolio1/cart.png", "caption": "장바구니" },
      { "url": "/images/projects/portfolio1/checkout.png", "caption": "결제 페이지" },
      { "url": "/images/projects/portfolio1/shofrinedposter.PNG", "caption": "포스터" }
    ],
    "contributions": {
      "score" : 40,
      "role": "팀장",
      "responsibilities": [
        "하루 단위의 스프린트 계획 및 회고 주도",
        "칸반보드를 이용한 전체 일정 관리 및 진행 상황 모니터링",
        "notion 활용한 페이지 기획, figma 사용한 화면 설계, 개발 전 과정 총괄",
        "카카오페이 API 결제 시스템 연동 구현",
        "친구 추천 구매 알고리즘 고안 및 제작",
        "백엔드 및 프론트엔드 통합"
      ]
    },
    "technologies": {
      "frontend": ["JavaScript"],
      "backend": ["Java 17", "Spring Boot", "JSP & Servlet","Tomcat","Gradle"],
      "database": ["MySQL"]
    },
    "troubleshooting": [
      {
        "problem": "POST 전송 로직에서 CSRF 공격 방지 미비로 인한 보안 취약점 발견",
        "solution": "Spring Security의 CSRF 방어 기능을 도입하여, 결제 요청 시 서버에서 발급한 CSRF 토큰을 클라이언트(쿠키 또는 HTML 숨김 필드)에 전달하고, 클라이언트는 해당 토큰을 요청 헤더에 포함하여 서버로 전송하도록 구현",
        "result": "서버에서 검증함으로써 요청의 무결성 확보"
      },
      {
        "problem": "RestController 사용한 단일 상품 결제 로직 데이터 전송 방식의 비효율성 문제 발생",
        "solution": "POST 요청의 Body에 담아 객체 배열 형태로 전송하고 서버에서 배열을 파싱, 상품을 조회 하여 일괄 결제 처리 로직 구현",
        "result": "요구사항 변화에 유연하게 대응할 수 있는 데이터 전송 및 API 설계의 중요성 인식"
      },
      {
        "problem": "Legacy -> Boot 마이그레이션 과정에서 UUID 기반 상품 CRUD 구현 시, 기존 데이터베이스와의 호환성 문제 발생",
        "solution": "서비스 계층에서 UUID 생성 및 할당 로직을 추가",
        "result": "기존 상품 ID를 UUID로 변환하고 새로운 상품 생성 시 UUID를 자동할당하여 데이터베이스와의 호환성 유지"
      }
    ],
    "links": {
      "github": "https://github.com/Wjyuy/ShoFriend_Final"
    }
  }
  
]